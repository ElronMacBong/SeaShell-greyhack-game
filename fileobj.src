// compobject -> create mutable instances of each exploit object
//////////////////////////////////////////////////////////
//////////////////////// INIT  ///////////////////////////
/////////////////////////////////////////////////////////

Mut_Comp = null // this is a shell that we will use for handling and throwing away shells 

FileObject = {}
///////////////////////////////// INIT /////////////////////////////////
FileObject.init = function(file=null, file_path=null)//path
	if file then 
		self.F = file
	else 
		self.F = File(file_path)
	end if
	if typeof(self.F) != "file" then return print("fo init error; expected file, got "+typeof(self.F))
	self.fname = self.F.name
	self.fpath = self.F.path
	self.user = self.F.owner
	self.perms = self.F.permissions
	self.isf = self.F.is_folder
	self.isb = self.F.is_binary
	self.scope = self.F.has_permission("r")+" "+self.F.has_permission("w")+" "+self.F.has_permission("x")
end function
//////////////////////////////////////////////////////////////////

///////////////////////////////// CAT ATTACK /////////////////////////////////
// wow i am bad
FileObject.cat_attack = function()
	if self.F.has_permission("r") == false then return print(warning+" Cant read "+file.name)
	if self.F.is_binary then return print("cat: Binary found: "+self.F.path)
	if self.F.is_folder then 
		for f in self.F.get_files 
			if f.is_binary then continue
			if f.has_permission("r") then print(color.white+file.name+":\n"+file.get_content)
		end for
		for sub in self.F.get_folders
			if sub.is_folder then 
				for sf in sub.get_files 
					if sf.is_binary then continue
					if sf.has_permission("r") then print(color.grey+sf.name+":\n"+sf.get_content) 
				end for
				for sfo in sub.get_folders 
					if sfo.is_folder then 
						for sfo2 in sfo.get_files
							if sfo2.is_folder then 
								ui = user_input("continue w/ "+sfo2.name)
								if ui.len > 0 then continue
								for sfo3 in sfo2.get_files
									if sfo3.is_binary then continue 
									if not sfo3.is_folder and sfo3.has_permission("r") then print(sfo3.name+":\n"+sfo3.get_content) 
								end for
							else 
								if sfo2.is_binary then continue
								if sfo2.has_permission("r") then print(sfo2.name+":\n"+sfo2.get_content)
							end if
						end for
					else
						if sfo.is_binary then continue
						if sfo.has_permission("r") then print(sfo.name+":\n"+sfo.get_content)
					end if
				end for
			else
				if sub.is_binary == false and sub.has_permission("r") then print(sub.name+":\n"+sub.get_content)
			end if
		end for
		return
	else   
		return print(color.white+file.name+":\n"+file.get_content)
	end if
		
	return print("Cant access "+file.name)
end function
///////////////////////////////// CONTENT ATTACK /////////////////////////////////
// specify the content of a file to something new
FileObject.content_attack = function(target_path = "/", choice = 0)
	if file == null then return print("unable to find "+target_path)
	if self.F.has_permission("w") == false then return print("unable to write to "+target_path)
	binaries = ["/home/guest/payload.txt"]
	choices = ""; count = 1;
	
	for binary in binaries
		choices = choices +"\n"+count+".) "+binary
	end for
	choices = "\n0.) Return to Main"
	select = user_input(choices+"\n--> ")
	select = select.val
	if select == 0 then return print("Returning . . .")
	if select > binaries.len then return print("Invalid option . . .")
	
	bin_file = self.PC.File(binaries[select-1])
	if bin_file == null then return print(warning+" No Bin File")
	if bin_file.has_permission("r") == false then return print("unable to read "+target_path)
	bin_content = bin_file.get_content
	file_set = file.set_content(bin_content)
	wait(0.1)
	if file_set == 1 then return print("Set Content of "+bin_file.name+" to "+file.name)
end function
///////////////////////////////// CHMOD /////////////////////////////////
FileObject.chmod_attack = function(user = "guest", perms = "o+wrx")
	ch_attempt = self.F.chmod(perms, true)
	ow_attempt = self.F.set_owner(user)
	gr_attempt = self.F.set_group(user)
	wait(0.1)
	if ch_attempt.len < 1 then print(self.F.name+" was given scope of"+perms)
	if ow_attempt.len < 1 then print(self.F.name+" is now owned by "+user)
	if gr_attempt.len < 1 then print(self.F.name+" has the group of "+user)
end function

///////////////////////////////// PWN /////////////////////////////////
FileObject.sys_pwn = function()
	if self.F.is_folder then 
		for fi in self.F.get_files
			print("Deleting --> "+color.yellow+fi.name)
			del = fi.delete
			wait(1.0)
			if del.len < 1 then 
				print(color.green+"Wiped "+color.red+fi.name)
			else
				print(color.red+"Failed to wipe: "+color.red+fi.name)
			end if
		end for
	else 
		del = self.F.delete
		if del.len == 0 then 
			print(color.green+"Wiped "+color.red+self.F.name)
		else
			print(color.red+"Failed to wipe: "+color.red+self.F.name)
		end if
	end if
	
end function
///////////////////////////////// CATTACK /////////////////////////////////
// print and decipher
// coding at 3am is bad for your health

FileObject.file_attack = function( net = null, all = null )
	if self.F.isb then return print(warning+" Binary File Found")
	if self.F.is_folder then 	
		for file in self.F.get_files
			if file.is_binary then continue
			if file.name == "passwd" then 
				print(color.green+" passwd file --> OK ")
				root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
				root_attempt = root_attempt.val
				if root_attempt == 1 then 
					roothash = file.get_content.split("\n")[0].split(":")[1]
					if not roothash then return print(color.red+"Error: Cannot get root hash.")
					password = crypto.decipher(roothash)
					if not password then return print(warning+"Error: Failed to decrypt root password.")
				end if
			else if file.name == "Bank.txt" and all then 
				bank = file.get_content.split("\n")[0].split(":")
				bankuser = bank[0]
				bankhach = bank[1]
				bankpw = crypto.decipher(bankhash)
				if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
			else if file.name == "Mail.txt" and all then 
				mail = file.get_content.split("\n")[0].split(":")
				mailuser = mail[0]
				mailhash = mail[1]
				mailpw = crypto.decipher(mailhash)
				if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
			else 
				print(file.name+":\n"+file.get_content)
			end if
		end for
		for subf in self.F.get_folders
			if subf.is_folder then 
				for subfile in subf.get_files
						if subfile.is_binary then continue
						if subf.name == "passwd" then 
						print(color.green+" passwd file --> OK ")
						root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
						root_attempt = root_attempt.val
						if root_attempt == 1 then 
							roothash = subfile.get_content.split("\n")[0].split(":")[1]
							if not roothash then return print(color.red+"Error: Cannot get root hash.")
							password = crypto.decipher(roothash)
							if not password then return print(warning+"Error: Failed to decrypt root password.")
						end if
					else if subf.name == "Bank.txt" and all then 
						bank = subfile.get_content.split("\n")[0].split(":")
						bankuser = bank[0];bankhach = bank[1];
						bankpw = crypto.decipher(bankhash)
						if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
					else if subf.name == "Mail.txt" and all then 
						mail = subfile.get_content.split("\n")[0].split(":")
						mailuser = mail[0];mailhash = mail[1];
						mailpw = crypto.decipher(mailhash)
						if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
					else 
						print(subf.name+":\n"+subf.get_content)
					end if
				end for
			
			else 
				if subf.is_binary then continue
				if subf.name == "passwd" then 
					print(color.green+" passwd file --> OK ")
					root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
					root_attempt = root_attempt.val
					if root_attempt == 1 then 
						roothash = subfile.get_content.split("\n")[0].split(":")[1]
						if not roothash then return print(color.red+"Error: Cannot get root hash.")
						password = crypto.decipher(roothash)
						if not password then return print(warning+"Error: Failed to decrypt root password.")
					end if
				else if subf.name == "Bank.txt" and all then 
					bank = subfile.get_content.split("\n")[0].split(":")
					bankuser = bank[0];bankhach = bank[1];
					bankpw = crypto.decipher(bankhash)
					if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
				else if subf.name == "Mail.txt" and all then 
					mail = subfile.get_content.split("\n")[0].split(":")
					mailuser = mail[0];mailhash = mail[1];
					mailpw = crypto.decipher(mailhash)
					if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
				else 
					print(subf.name+":\n"+subf.get_content)
				end if
			end if
			
			
		end for
	else 
		if self.F.name == "passwd" then 
			print(color.green+" passwd file --> OK ")
			root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
			root_attempt = root_attempt.val
			if root_attempt == 1 then 
				roothash = self.F.get_content.split("\n")[0].split(":")[1]
				if not roothash then return print(color.red+"Error: Cannot get root hash.")
				password = crypto.decipher(roothash)
				if not password then return print(warning+"Error: Failed to decrypt root password.")
			end if
		else if self.F.name == "Bank.txt" and all then 
			bank = self.F.get_content.split("\n")[0].split(":")
			bankuser = bank[0];bankhach = bank[1];
			bankpw = crypto.decipher(bankhash)
			if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
		else if self.F.name == "Mail.txt" and all then 
			mail = self.F.get_content.split("\n")[0].split(":")
			mailuser = mail[0];mailhash = mail[1];
			mailpw = crypto.decipher(mailhash)
			if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
		else 
			print(file.get_content)
		end if
	end if

end function



// compobject -> create mutable instances of each exploit object
//////////////////////////////////////////////////////////
//////////////////////// INIT  ///////////////////////////
/////////////////////////////////////////////////////////

Mut_Comp = null // this is a shell that we will use for handling and throwing away shells 

CompObject = {}
CompObject.shell = {} 
CompObject.fs = {}
CompObject.user = "unknown"
CompObject.pass = "pass"
CompObject.type = "base"

///////////////////////////////// INIT /////////////////////////////////
CompObject.init = function(computer)
	if typeof(computer) != "computer" then print("c.o init error 1: computer expected, got"+typeof(computer))
	if not computer then return print("c.o init error 2")
	self.PC = computer
	self.ip = computer.public_ip
	self.lan = computer.local_ip
end function

//////////////////////////////////////////////////////////////////

///////////////////////////////// TOUCH ATTACK /////////////////////////////////
CompObject.touch_attack = function(file_path = home_dir, file_name = "fishy.txt")
	mole_file = self.PC.touch(file_path, file_name)
	wait(0.2)
	mole_file = self.PC.File(file_pathr+"/"+file_name)
	if mole_file then 
		print(mole_file.path+" owner: "+mole_file.owner+" "+mole_file.has_permission("r")+" "+mole_file.has_permission("r")+" "+mole_file.has_permission("x"))
		return true
	end if
	return false
end function
///////////////////////////////// CAT ATTACK /////////////////////////////////
CompObject.cat_attack = function(target_path = "/")
	file = self.PC.File(target_path)
	if file == null then return print(warning+" No file found")
	if file.has_permission("r") == false then return print(warning+" Cant read "+file.name)
	if file.is_folder then 
		for f in file.get_files 
			if f.is_binary == false and file.has_permission("r") then 
				print(color.white+file.name+":\n"+file.get_content)
			end if
		end for
		return
	else   
		return print(color.white+file.name+":\n"+file.get_content)
	end if
		

	return print("Cant access "+file.name)
end function
///////////////////////////////// CONTENT ATTACK /////////////////////////////////
// specify the content of a file to something new
CompObject.content_attack = function(target_path = "/", choice = 0)
	file = self.PC.File(target_path)
	if file == null then return print("unable to find "+target_path)
	if file.has_permission("w") == false then return print("unable to write to "+target_path)
	binaries = ["/home/guest/payload.txt"]
	choices = ""; count = 1;
	
	for binary in binaries
		choices = choices +"\n"+count+".) "+binary
	end for
	choices = "\n0.) Return to Main"
	select = user_input(choices+"\n--> ")
	select = select.val
	if select == 0 then return print("Returning . . .")
	if select > binaries.len then return print("Invalid option . . .")
	
	bin_file = self.PC.File(binaries[select-1])
	if bin_file == null then return print(warning+" No Bin File")
	if bin_file.has_permission("r") == false then return print("unable to read "+target_path)
	bin_content = bin_file.get_content
	file_set = file.set_content(bin_content)
	wait(0.1)
	if file_set == 1 then return print("Set Content of "+bin_file.name+" to "+file.name)
end function
///////////////////////////////// CHMOD /////////////////////////////////
CompObject.chmod_attack = function(file_path = "/", user = "guest", perms = "o+wrx")
	base_file = self.PC.File(file_path)
	if base_file == null then return print(warning+" No File Found")
	ch_attempt = base_file.chmod(perms, true)
	ow_attempt = base_file.set_owner(user)
	gr_attempt = base_file.set_group(user)
	wait(0.1)
	if ch_attempt.len < 1 then print(base_file.name+" was given scope of"+perms)
	if ow_attempt.len < 1 then print(base_file.name+" is now owned by "+user)
	if gr_attempt.len < 1 then print(base_file.name+" has the group of "+user)
end function

///////////////////////////////// PWN /////////////////////////////////
CompObject.sys_pwn = function()
	dirs = ["/boot", "/sys", "/"]
	for dir in dirs
		file = self.pc.File(dir)
		if file == null then continue
		if file.is_folder then 
			for f in file.get_files
				print("attempting deletion of: "+f.name)
				fd = f.delete
				wait(0.1)
				if fd.len == 0 then print("deletion --> OK") 
			end for
			print("attempting deletion of: "+file.name)
			fdel = file.delete
			wait(0.1)
			if fdel == 0 then print("deletion --> OK") 
		else 
			print("attempting deletion of: "+file.name)
			fdel = file.delete
			wait(0.1)
			if fdel == 0 then print("deletion --> OK") 
		end if 
	end for
end function
///////////////////////////////// CATTACK /////////////////////////////////
// print and decipher
CompObject.pw_attack = function(net_session = null, addr = null, port = null)
	print(color.green+"[C]"+color.white+" attempting simple password change . . .") 
	root_shell = null
	password = null
	password = user_input("Enter a new password: ", true)
	pw_change = self.PC.change_password("root", password)
	wait(0.1)
	if pw_change == 1 then
		print(color.green+"-- auth change OK !  --> "+password)
	else
		print(color.grey+"not root -->"+color.yellow+" attempting /etc/passwd . . .")
		file = self.PC.File("/etc/passwd")
		if not file then return print(color.yellow+"Error: Cannot get passwd file.")
		if not file.has_permission("r") then return print(color.red+"/etc/passwd: Permission denied.") 
		if file.is_binary or file.is_folder then return print(color.purple+"File is either binary or a folder.")
		roothash = file.get_content.split("\n")[0].split(":")[1]
		if not roothash then return print(color.red+"Error: Cannot get root hash.")
		password = crypto.decipher(roothash)

		if not password then return print(warning+"Error: Failed to decrypt root password.")
		print("><> ><> Root AUTH Obtained ! ><> ><> " +color.green+ password)
		new_password = user_input("Enter a new password: ", true)
		pw_change = self.PC.change_password("root", password)
		if pw_change == 1 then
			print(color.green+"-- auth change OK !  --> "+new_password)
			password = new_password
		end if
	end if
	root_shell = new ShellObject
	if net_session then
		confirm = user_input(color.white+"* Press 1 to connect current shell to hacked computer *\n"+color.grey+"* Press Any to return *\n--> ").to_int
		if confirm != 1 then return password
		user = user_input(color.white+"Specify a User, or press Enter for root connection\nUser: ")
		if user.len == 0 then user = "root"
		connection = Utils.connect(null, user, password, addr, port)
		if typeof(connection) == "shell" or typeof(connection) == "ftpshell" then 
			Utils.paired_msg
			root_shell.init(connection)
		end if
	else
		root_shell.init(null, "root", password, "root")
		Utils.paired_msg
	end if
	return root_shell
end function

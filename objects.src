// shellobject -> create mutable instances of each exploit object
//////////////////////////////////////////////////////////
//////////////////////// SHELLS  ////////////////////////
/////////////////////////////////////////////////////////
Global_Shells = [] // primitive list for handling multiple shells ?
Mut_Shell = null // this is a shell that we will use for handling and throwing away shells 

ShellObject = {}
ShellObject.user = "unknown"
ShellObject.pass = "pass"
ShellObject.type = "base"
ShellObject.fs = {}

ShellObject.init = function(shell=null, user=null, pass=null, type=null)
	if shell then self.shell = shell
	if not shell and user and pass then self.shell = get_shell(user, pass)
	if not shell and not user then self.shell = get_shell
	if type then self.type = type
	self.pc = self.shell.host_computer
	self.ip = self.shell.host_computer.public_ip
	self.lan = self.shell.host_computer.local_ip
	self.user = function()
		object = self.shell.host_computer
		if not object then return print("User check error, no object found")
		if object.File("/root").has_permission("r") and object.File("/root").has_permission("w") and object.File("/root").has_permission("x") then return object.File("/root").name
		if object.File("/home") == null then return "unknown"
		for f in object.File("/home/").get_folders
    		if f.name=="guest" then continue
			if f.has_permission("r") and f.has_permission("w") and f.has_permission("x") then return f.name
  		end for
  		return "guest"
	end function
	self.is_root = self.shell.host_computer.File("/root").has_permission("r") and self.shell.host_computer.File("/root").has_permission("w") and self.shell.host_computer.File("/root").has_permission("x")
	self.dict = self.shell.host_computer.File("/home")	
end function

/////////////////////////////////////////////////////////
////////////////////////// UTILITY /////////////////////
///////////////////////////////////////////////////////
// =======================  cd =======================
ShellObject.cd = function(p=null)
	if not p then dir = self.pc.File(self.home)
	if p then dir = self.pc.File(p)
	if dir == null then return print(warning+" No directory found")
	self.dict = p
	return self.dict
end function

// =======================  ls =======================
ShellObject.ls = function(p)
	print(init+" fs: "+color.white+p)
	folder_path = p
	if not p then folder_path = current_path
	folder = self.pc.File(folder_path)
	if folder == null then return print("ls no file or directory found")
	if not folder.has_permission("r") then return print("You do not have read access for "+folder)
	sub_files = folder.get_folders + folder.get_files
	output = ""
	for f in sub_files
		if output.len > 0 then output = output + "\n"
		file_name = f.name; permission = f.permissions
		output = output + permission + " " + f.owner + " " + f.group + " " + f.size + " 00:00 " + file_name
	end for
	print(format_columns(output))
end function
// =======================  ps =======================
ShellObject.ps = function()
	output = self.pc.show_procs
	return print(format_columns(output))
end function
// =======================  kill =======================
ShellObject.kill = function(pid)
	if typeof(pid) != "number" then return print(warning+" The PID must be a number\n")
	output = self.pc.close_program(pid)
	if output == true then return print("Process " + pid + " closed");
	if output then return print(output)
	print("Process " + pid + " not found")
end function
// =======================  pw =======================
ShellObject.pw = function(user)
	inputMsg = "Changing password for user " + user +".\nNew password:"
	inputPass = user_input(inputMsg, true)
	output = self.pc.change_password(user, inputPass)
	self.pass = inputPass
	if output == true then return print(user+" password modified OK")
	if output then return print(output)
	print(warning+" password not modified, are you root?")
end function

// =======================  sudo =======================

ShellObject.sudo = function(arg, arg2=null, arg3=null)
	computer = self.pc
	inputPass = user_input("Password: ", true)
	s = new ShellObject
	if arg == "-u" then 
		s.init(self.shell)
	else
		s.init(self.shell, "root". inputPass, "root")
	end if
	if not s then return print(color.orange+"AUTH FAIL")
	if arg == "-l" then 
		program = self.pc.File(arg2)
		if not program then return print(arg2 + " not found.")
		if not arg3 then s.shell.launch(arg2)
		if arg3	then s.shell.launch(arg2, arg3)
	end if
	if s then
		print(color.green+" AUTH OK ") 
		confirm = user_input("1.) Terminal\n2.) Surf Mode\n3.) Exit\n--> ")
		if confirm.val == 1 then return s.shell.start_terminal
		if confirm.val == 2 then return s.shell.launch(launch_path, "-s")
	end if
	return s
end function
// =======================  chmod =======================
ShellObject.ch = function(shell, recursive, perms, path_to_file)
	file = shell.host_computer.File(path_to_file)
	if file == null then return print("cannot find file "+path_to_file)
	output = file.chmod(perms, recursive)
	if output then print(output)
end function


/////////////////////////////////////////////////////////
/////////////////////   ATTACKS  ////////////////////////
/////////////////////////////////////////////////////////


ShellObject.pw_attack = function(net = null)

	password = null
	

	if self.user == "root" then
	//if pw_change == 1 then
		print(color.purple+"[S]"+color.white+" attempting root password change . . .") 
		password = user_input("Enter a new password: ", true)
		pw_change = self.pc.change_password("root", password)
		wait(0.1)
		if pw_change == 1 then print(color.green+"-- auth change OK !  --> "+password)
	else
		print(color.grey+"-- Non Root !  --> "+color.cap+" attempting to access /etc/passwd . . .")
		file = self.pc.File("/etc/passwd")
		if not file then return print(color.yellow+"Error: Cannot get passwd file.")
		if not file.has_permission("r") then return print(color.red+"/etc/passwd: Permission denied.") 
		if file.is_binary or file.is_folder then return print(color.purple+"File is either binary or a folder.")
		roothash = file.get_content.split("\n")[0].split(":")[1]
		if not roothash then return print(color.red+"Error: Cannot get root hash.")
		if not crypto then crypto = include_lib("/home/guest/crypto.so")
		if not crypto then return print(color.red+"[ Warning ] Crypto Not Found")
		password = crypto.decipher(roothash)
		if not password then return print(warning+"Error: Failed to decrypt root password.")
		print("><> ><> Root Shell Obtained ! ><> ><> \nUser: root\nPass: " + password)
	end if
	if not net then
		root_shell = new ShellObject
		//connect = user_input(color.white+"* Press 1 to connect a net shell *"+color.cap+color.grey+" * Press any to return root shell * "+color.cap+"--> ") 
		//connect = connect.val
		//if connect == 1 then 
			//connect = Utils.connect(null, "root", password, addr, port)
			//if root_shell != null then root_shell.init(connect)
		//end if
		//if connect != 1 then root_shell = password
		root_shell.init(null, "root", password)
	else 
		root_shell = password
	end if
	
	return root_shell
end function

///////////////////////////////// CHMOD /////////////////////////////////
ShellObject.chmod_attack = function(file = "/", user = "guest", perms = "o+wrx")
	if self.pc.File(file) == null then return(warning+"couldnt find "+ file)
	ch_attempt = self.pc.chmod(perms, true)
	ow_attempt = self.pc.set_owner(user)
	gr_attempt = self.pc.set_group(user)
	wait(0.1)
	if ch_attempt.len < 1 then print(self.F.name+" was given scope of"+perms)
	if ow_attempt.len < 1 then print(self.F.name+" is now owned by "+user)
	if gr_attempt.len < 1 then print(self.F.name+" has the group of "+user)
end function

///////////////////////////////// PWN /////////////////////////////////
ShellObject.sys_pwn = function()
	dirs = ["/boot", "/sys", "/"]
	for dir in dirs
		file = self.pc.File(dir)
		if file == null then continue
		if file.is_folder then 
			for f in file.get_files
				print("attempting deletion of: "+f.name)
				fd = f.delete
				wait(0.1)
				if fd.len == 0 then print("deletion --> OK") 
			end for
			print("attempting deletion of: "+file.name)
			fdel = file.delete
			wait(0.1)
			if fdel.len == 0 then print("deletion --> OK") 
		else 
			print("attempting deletion of: "+file.name)
			fdel = file.delete
			wait(0.1)
			if fdel.len == 0 then print("deletion --> OK") 
		end if 
	end for
end function


//print("===========================================================")
// =======================  TEST CASES =======================
//test_shell = get_shell
//print(test_shell isa ShellObject)

//shell_obj = new ShellObject
//shell_obj.init()
//print(shell_obj isa ShellObject)
//print("shell? "+typeof(shell_obj))
//print("shell.shell? "+typeof(shell_obj.shell))

//print("===========================================================")

//shell_obj_2 = new ShellObject
//shell_obj_2.init(test_shell)
//print(shell_obj_2 isa ShellObject)
//print("shell? "+typeof(shell_obj_2))
//print("shell.shell? "+typeof(shell_obj_2.shell))

//print("===========================================================")

//shell_obj_3 = new ShellObject
//shell_obj_3.init(null, "root", pass, "root")
//print(shell_obj_3 isa ShellObject)
//print("shell? "+typeof(shell_obj_3))
//print("shell.shell? "+typeof(shell_obj_3.shell))

//print("===========================================================")

//print(shell_obj.getUser("/home/guest"))
//print(shell_obj.getUser("/home/guest"))
//print(shell_obj_2.is_root)
//print(shell_obj_3.shell.launch("/bin/ss", "-s"))
//print("===========================================================")

//shell_obj_3.t


// compobject -> create mutable instances of each exploit object
//////////////////////////////////////////////////////////
//////////////////////// INIT  ///////////////////////////
/////////////////////////////////////////////////////////

Mut_Comp = null // this is a shell that we will use for handling and throwing away shells 

CompObject = {}
CompObject.fs = {}
CompObject.user = "unknown"
CompObject.email = "null"
CompObject.bank = "void"

CompObject.pass = "pass"
CompObject.type = "base"

///////////////////////////////// INIT /////////////////////////////////
CompObject.init = function(computer)
    if typeof(computer) != "computer" then print("c.o init error 1: computer expected, got"+typeof(computer))
    if not computer then return print("c.o init error 2")
    self.PC = computer
	self.user = function()
		if self.PC.File("/root").has_permission("r") and self.PC.File("/root").has_permission("w") and self.PC.File("/root").has_permission("x") then return self.PC.File("/root").name
		if self.PC.File("/home") == null then return "unknown"
		for f in self.PC.File("/home/").get_folders
    		if f.name=="guest" then continue
			if f.has_permission("r") and f.has_permission("w") and f.has_permission("x") then
				email = self.PC.File("/home/"+file.name+"/Config/Mail.txt")
				bank = self.PC.File("/home/"+file.name+"/Config/Bank.txt")
				if email and not email.is_binary then self.email = email.get_content
				if bank and not bank.is_binary then self.bank = bank.get_content
				return f.name
			end if
  		end for
  		return "guest"
	end function
    self.ip = computer.public_ip
    self.lan = computer.local_ip
end function

//////////////////////////////////////////////////////////////////

///////////////////////////////// TOUCH ATTACK /////////////////////////////////
CompObject.touch_attack = function(file_path = home_dir, file_name = "fishy.txt")
    mole_file = self.PC.touch(file_path, file_name)
    wait(0.2)
    mole_file = self.PC.File(file_pathr+"/"+file_name)
    if mole_file then 
        print(mole_file.path+" owner: "+mole_file.owner+" "+mole_file.has_permission("r")+" "+mole_file.has_permission("r")+" "+mole_file.has_permission("x"))
        return true
    end if
    return false
end function
///////////////////////////////// CAT ATTACK /////////////////////////////////
CompObject.cat_attack = function(target_path = "/")
    file = self.PC.File(target_path)
    if file == null then return print(warning+" No file found")
    if file.has_permission("r") == false then return print(warning+" Cant read "+file.name)
    if file.is_folder then 
        for f in file.get_files 
            if f.is_binary == false and file.has_permission("r") then 
                print(color.white+file.name+":\n"+file.get_content)
            end if
        end for
        return
    else   
        return print(color.white+file.name+":\n"+file.get_content)
    end if
        

    return print("Cant access "+file.name)
end function
///////////////////////////////// CONTENT ATTACK /////////////////////////////////
// specify the content of a file to something new
CompObject.content_attack = function(target_path = "/", choice = 0)
    file = self.PC.File(target_path)
    if file == null then return print("unable to find "+target_path)
    if file.has_permission("w") == false then return print("unable to write to "+target_path)
    binaries = ["/home/guest/payload.txt"]
    choices = ""; count = 1;
    
    for binary in binaries
        choices = choices +"\n"+count+".) "+binary
    end for
    choices = "\n0.) Return to Main"
    select = user_input(choices+"\n--> ")
    select = select.val
    if select == 0 then return print("Returning . . .")
    if select > binaries.len then return print("Invalid option . . .")
    
    bin_file = self.PC.File(binaries[select-1])
    if bin_file == null then return print(warning+" No Bin File")
    if bin_file.has_permission("r") == false then return print("unable to read "+target_path)
    bin_content = bin_file.get_content
    file_set = file.set_content(bin_content)
    wait(0.1)
    if file_set == 1 then return print("Set Content of "+bin_file.name+" to "+file.name)
end function
///////////////////////////////// CHMOD /////////////////////////////////
CompObject.chmod_attack = function(file_path, user = "guest", perms = "o+wrx")
    base_file = self.PC.File(file_path)
    if base_file == null then return print(warning+" No File Found")
    ch_attempt = base_file.chmod(perms, true)
    ow_attempt = base_file.set_owner(user)
    gr_attempt = base_file.set_group(user)
    wait(0.1)
    if ch_attempt.len < 1 then print(base_file.name+" was given scope of"+perms)
    if ow_attempt.len < 1 then print(base_file.name+" is now owned by "+user)
    if gr_attempt.len < 1 then print(base_file.name+" has the group of "+user)
end function

///////////////////////////////// PWN /////////////////////////////////
CompObject.sys_pwn = function()
    dirs = ["/boot", "/sys", "/"]
    for dir in dirs
        file = self.pc.File(dir)
        if file == null then continue
        if file.is_folder then 
            for f in file.get_files
                print("attempting deletion of: "+f.name)
                fd = f.delete
                wait(0.1)
                if fd.len == 0 then print("deletion --> OK") 
            end for
            print("attempting deletion of: "+file.name)
            fdel = file.delete
            wait(0.1)
            if fdel == 0 then print("deletion --> OK") 
        else 
            print("attempting deletion of: "+file.name)
            fdel = file.delete
            wait(0.1)
            if fdel == 0 then print("deletion --> OK") 
        end if 
    end for
end function
///////////////////////////////// CATTACK /////////////////////////////////
// print and decipher
CompObject.pw_attack = function(net_session = null, addr = null, port = null)
    print(color.green+"[C]"+color.white+" attempting simple password change . . .") 
    root_shell = null
    password = null
    password = user_input("Enter a new password: ", true)
    pw_change = self.PC.change_password("root", password)
    wait(0.1)
    if pw_change == 1 then
        print(color.green+"-- auth change OK !  --> "+password)
    else
        print(color.grey+"not root -->"+color.yellow+" attempting /etc/passwd . . .")
        file = self.PC.File("/etc/passwd")
        if not file then return print(color.yellow+"Error: Cannot get passwd file.")
        if not file.has_permission("r") then return print(color.red+"/etc/passwd: Permission denied.") 
        if file.is_binary or file.is_folder then return print(color.purple+"File is either binary or a folder.")
        roothash = file.get_content.split("\n")[0].split(":")[1]
        if not roothash then return print(color.red+"Error: Cannot get root hash.")
        password = crypto.decipher(roothash)

        if not password then return print(warning+"Error: Failed to decrypt root password.")
        print("><> ><> Root AUTH Obtained ! ><> ><> " +color.green+ password)
        new_password = user_input("Enter a new password: ", true)
        pw_change = self.PC.change_password("root", password)
        if pw_change == 1 then
            print(color.green+"-- auth change OK !  --> "+new_password)
            password = new_password
        end if
    end if
    root_shell = new ShellObject
    if net_session then
        confirm = user_input(color.white+"* Press 1 to connect current shell to hacked computer *\n"+color.grey+"* Press Any to return *\n--> ").to_int
        if confirm != 1 then return password
        user = user_input(color.white+"Specify a User, or press Enter for root connection\nUser: ")
        if user.len == 0 then user = "root"
        connection = Utils.connect(null, user, password, addr, port)
        if typeof(connection) == "shell" or typeof(connection) == "ftpshell" then 
            Utils.paired_msg
            root_shell.init(connection)
        end if
    else
        root_shell.init(null, "root", password, "root")
        Utils.paired_msg
    end if
    return root_shell
end function



// compobject -> create mutable instances of each exploit object
//////////////////////////////////////////////////////////
//////////////////////// INIT  ///////////////////////////
/////////////////////////////////////////////////////////

Mut_Comp = null // this is a shell that we will use for handling and throwing away shells 

FileObject = {}
///////////////////////////////// INIT /////////////////////////////////
FileObject.init = function(file=null, file_path=null)//path
    if file then 
        self.F = file
    else 
        self.F = File(file_path)
    end if
    if typeof(self.F) != "file" then return print("fo init error; expected file, got "+typeof(self.F))
    self.fname = self.F.name
    self.fpath = self.F.path
    self.user = self.F.owner
    self.perms = self.F.permissions
    self.isf = self.F.is_folder
    self.isb = self.F.is_binary

	self.r = self.F.has_permission("r")
	self.w = self.F.has_permission("w")	
	self.x = self.F.has_permission("x")
	self.scope = self.r+" "+self.w+" "+self.x
end function
//////////////////////////////////////////////////////////////////

///////////////////////////////// CAT ATTACK /////////////////////////////////
FileObject.cat_attack = function()
	if self.F.r == false then return print("FO Error: Cant read "+self.F.name)
	if self.F.isf then
		sub_files = self.F.get_files
		sub_folders = self.F.get_folders
		for subFi in sub_files
			if not subFi.is_binary then print(subFi.path+":\n"+subFi.get_content)
		end for
		for subFo in sub_folders
			for subFi2 in subFo.get_files
				if not subFi2.is_binary then print(subFi2.path+":\n"+subFi2.get_content)
			end for
			for subFo2 in subFo.get_folders
				for subFi3 in subFo2.get_files
					if not subFi3.is_binary then print(subFi3.path+":\n"+subFi3.get_content)
				end for
			end for
		end for
	else 
		if not F.isb then return print(self.F.path+":\n"+self.F.get_content)
	end if
end function

///////////////////////////////// CONTENT ATTACK /////////////////////////////////
// specify the content of a file to something new
FileObject.content_attack = function(target_path = "/", choice = 0)
    if self.F.w == false then return print("unable to write to "+target_path)
    binaries = ["/home/guest/payload.txt"]
    choices = ""; count = 1;
    
    for binary in binaries
        choices = choices +"\n"+count+".) "+binary
    end for
    choices = "\n0.) Return to Main"
    select = user_input(choices+"\n--> ")
    select = select.val
    if select == 0 then return print("Returning . . .")
    if select > binaries.len then return print("Invalid option . . .")
    
    bin_file = self.PC.File(binaries[select-1])
    if bin_file == null then return print(warning+" No Bin File")
    if bin_file.has_permission("r") == false then return print("unable to read "+target_path)
    bin_content = bin_file.get_content
    file_set = file.set_content(bin_content)
    wait(0.1)
    if file_set == 1 then return print("Set Content of "+bin_file.name+" to "+file.name)
end function
///////////////////////////////// CHMOD /////////////////////////////////
FileObject.chmod_attack = function(user = "guest", perms = "o+wrx")
    ch_attempt = self.F.chmod(perms, true)
    ow_attempt = self.F.set_owner(user)
    gr_attempt = self.F.set_group(user)
    wait(0.1)
    if ch_attempt.len < 1 then print(self.F.name+" was given scope of"+perms)
    if ow_attempt.len < 1 then print(self.F.name+" is now owned by "+user)
    if gr_attempt.len < 1 then print(self.F.name+" has the group of "+user)
end function

///////////////////////////////// PWN /////////////////////////////////
FileObject.sys_pwn = function()
    if self.F.is_folder then 
        for fi in self.F.get_files
            print("Deleting --> "+color.yellow+fi.name)
            del = fi.delete
            wait(1.0)
            if del.len < 1 then 
                print(color.green+"Wiped "+color.red+fi.name)
            else
                print(color.red+"Failed to wipe: "+color.red+fi.name)
            end if
        end for
    else 
        del = self.F.delete
        if del.len == 0 then 
            print(color.green+"Wiped "+color.red+self.F.name)
        else
            print(color.red+"Failed to wipe: "+color.red+self.F.name)
        end if
    end if
    
end function
///////////////////////////////// CATTACK /////////////////////////////////
// print and decipher
// coding at 3am is bad for your health

FileObject.file_attack = function( net = null, all = null )
    if self.F.isb then return print(warning+" Binary File Found")
    if self.F.is_folder then 	
        for file in self.F.get_files
            if self.F.isb then continue
            if file.name == "passwd" then 
                print(color.green+" passwd file --> OK ")
                root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
                root_attempt = root_attempt.val
                if root_attempt == 1 then 
                    roothash = file.get_content.split("\n")[0].split(":")[1]
                    if not roothash then return print(color.red+"Error: Cannot get root hash.")
                    password = crypto.decipher(roothash)
                    if not password then return print(warning+"Error: Failed to decrypt root password.")
                end if
            else if file.name == "Bank.txt" and all then 
                bank = file.get_content.split("\n")[0].split(":")
                bankuser = bank[0]
                bankhach = bank[1]
                bankpw = crypto.decipher(bankhash)
                if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
            else if file.name == "Mail.txt" and all then 
                mail = file.get_content.split("\n")[0].split(":")
                mailuser = mail[0]
                mailhash = mail[1]
                mailpw = crypto.decipher(mailhash)
                if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
            else 
                print(file.name+":\n"+file.get_content)
            end if
        end for
        for subf in self.F.get_folders
            if subf.is_folder then 
                for subfile in subf.get_files
                    if subfile.is_binary then continue
                        if subf.name == "passwd" then 
                        print(color.green+" passwd file --> OK ")
                        root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
                        root_attempt = root_attempt.val
                        if root_attempt == 1 then 
                            roothash = subfile.get_content.split("\n")[0].split(":")[1]
                            if not roothash then return print(color.red+"Error: Cannot get root hash.")
                            password = crypto.decipher(roothash)
                            if not password then return print(warning+"Error: Failed to decrypt root password.")
                        end if
                    else if subf.name == "Bank.txt" and all then 
                        bank = subfile.get_content.split("\n")[0].split(":")
                        bankuser = bank[0];bankhach = bank[1];
                        bankpw = crypto.decipher(bankhash)
                        if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
                    else if subf.name == "Mail.txt" and all then 
                        mail = subfile.get_content.split("\n")[0].split(":")
                        mailuser = mail[0];mailhash = mail[1];
                        mailpw = crypto.decipher(mailhash)
                        if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
                    else 
                        print(subf.name+":\n"+subf.get_content)
                    end if
                end for
            
            else 
                if subf.is_binary then continue
                if subf.name == "passwd" then 
                    print(color.green+" passwd file --> OK ")
                    root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
                    root_attempt = root_attempt.val
                    if root_attempt == 1 then 
                        roothash = subfile.get_content.split("\n")[0].split(":")[1]
                        if not roothash then return print(color.red+"Error: Cannot get root hash.")
                        password = crypto.decipher(roothash)
                        if not password then return print(warning+"Error: Failed to decrypt root password.")
                    end if
                else if subf.name == "Bank.txt" and all then 
                    bank = subfile.get_content.split("\n")[0].split(":")
                    bankuser = bank[0];bankhach = bank[1];
                    bankpw = crypto.decipher(bankhash)
                    if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
                else if subf.name == "Mail.txt" and all then 
                    mail = subfile.get_content.split("\n")[0].split(":")
                    mailuser = mail[0];mailhash = mail[1];
                    mailpw = crypto.decipher(mailhash)
                    if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
                else 
                    print(subf.name+":\n"+subf.get_content)
                end if
            end if
            
            
        end for
    else 
        if self.F.name == "passwd" then 
            print(color.green+" passwd file --> OK ")
            root_attempt = user_input("1.) Decipher\n2.) Press any to return\n--> ")
            root_attempt = root_attempt.val
            if root_attempt == 1 then 
                roothash = self.F.get_content.split("\n")[0].split(":")[1]
                if not roothash then return print(color.red+"Error: Cannot get root hash.")
                password = crypto.decipher(roothash)
                if not password then return print(warning+"Error: Failed to decrypt root password.")
            end if
        else if self.F.name == "Bank.txt" and all then 
            bank = self.F.get_content.split("\n")[0].split(":")
            bankuser = bank[0];bankhach = bank[1];
            bankpw = crypto.decipher(bankhash)
            if bankpw then print("[Bank] "+bankuser+" : "+bankpw)
        else if self.F.name == "Mail.txt" and all then 
            mail = self.F.get_content.split("\n")[0].split(":")
            mailuser = mail[0];mailhash = mail[1];
            mailpw = crypto.decipher(mailhash)
            if mailpw then print("[Mail] "+mailuser+" : "+mailpw)
        else 
            print(file.get_content)
        end if
    end if

end function

// copy attack
FileObject.swap = function(filePath)
	if File(filePath) == null then


end function

// redirects 

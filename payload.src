// payload -- deploy to elevate to root --> new autolocal
//import_code("/home/2NA/source/utils.src")

import_code("/home/2NA/src/shellobj")
import_code("/home/2NA/src/compobj")
import_code("/home/2NA/src/fileobj")

import_code("/home/2NA/modules/utils.src") 
import_code("/home/2NA/source/binary")

import_code("/home/2NA/source/getlib.src")
import_code("/home/2NA/source/loadlib.src")
import_code("/home/2NA/source/gethacks.src")
//import_code("/home/2NA/source/shelltype.src")


import_code("/home/2NA/source/exploitmenu.src")
import_code("/home/2NA/source/send")

print(init+color.red+"~~~~^~~^~~^~ Beginning Auto Local ~^~~^~~^~~~~")
data = get_custom_object()
shells = []
comps = []
files = []
others = []
hacks = get_local_hacks()
crypto = get_library("crypto.so")
// we put the null switch here, and if we select a shell or etc we can go from there
pass = "pass"

if hacks.len == 0 then exit("Error: Could not get local hacks.")
for hack in hacks
	lib = load_library(hack["metalib"])
	if not lib then continue
	print("Trying Library: " + lib.lib_name + ":" + lib.version)
	for value in hack["values"]
		result = lib.overflow(hack["memory"], value, pass)
		if not result then continue
		if typeof(result) == "shell" then shells = shells + [result]
		if typeof(result) == "computer" then comps = comps + [result]
		if typeof(result) == "file" then files = files + [result]
		if typeof(result) == "string" or typeof(result) == "number" then others = others + [result]
		if typeof(result) == "string" then print(color.green+"result found of string: "+result) 
		if typeof(result) == "number" then print(color.green+"result found of number: "+result)
		if typeof(result) == "shell" then print(color.green+"result found of shell: "+result) 
		if typeof(result) == "computer" then print(color.green+"result found of computer: "+result)
			
	end for
end for
if shells.len == 0 and comps.len == 0 and files.len == 0 and others.len == 0 then return print(warning+" no local hacks found") 
choice_array = [shells, comps, files, others]
choice_title = ["SHELLS: ", "PCS: ", "FILES: ", "OTHERS: ",]
shell_objects = []
comp_objects = []
file_objects = []
other_objects = []
index = 0
// loop the exploit objects
for choice in choice_array
	//print(color.white+choice_title[index])
	for exploit in choice
		//print(color.grey+choice_title[index]+" EXPLOIT: "+ typeof(exploit))
		if index == 0 then
		a = new data.so
		a.init(exploit)
		shell_objects = shell_objects + [ a ]
	else if index == 1 then 
		b = new CompObject
		b.init(exploit)
		comp_objects = comp_objects + [ b ]
	else if index == 2 then
		c = new FileObject
		c.init(exploit, null)
		file_objects = file_objects + [ c ]
	else if index == 3 then  
		//d = new OtherObject
		//d.init(exploit)
		other_objects = other_objects + [ exploit ]
		end if
	end for
	index = index + 1
end for
shells = shell_objects
comps = comp_objects
files = file_objects
others = other_objects

selected_menu = 0
selected_option = 0
selected_exploit = null
selecting = true
options = []

print(init+" Beginning"+color.red+" local exploit"+color.cap+" menu @ "+color.white+get_shell.host_computer.public_ip+color.cap+":"+color.green+get_shell.host_computer.local_ip)
/////// ATTACKS  
////////////////////////////////////////////
if shells.len == 0 and comps.len == 0 and files.len == 0 and others.len == 0 then return print("error: no exploits found")
attack_result = exploit_menu(shells, comps, files, others)
selected_menu = attack_result[0]
selected_exploit = attack_result[1]

root = null
attacking = true 

//print("SELECTED EXPLOIT"+ selected_exploit.shell)

while attacking == true 
	if shells.len == 0 and files.len == 0 and comps.len == 0 then break
	if attacking == false or typeof(root) == "shell" then break
	// SHELL 
	if selected_menu == 1 then 
		default_color = color.white
		default = selected_exploit.shell
		if default == "root" then default_color = color.green
        input = user_input(color.purple+"Shell Object [ "+default_color+Utils.user(selected_exploit.shell)+color.cap+" ]\n1.) PW Read + Escalation \n2.) CHMOD\n3.) KILL \n4.) Pass the shell \n0.) Exploit Main Menu\n--> ")
		input = input.val 
		if input == 1 then 
			root = selected_exploit.pw_attack()
			if not root then attacking = true 
			if root then attacking = false
		else if input == 2 then
			p = user_input("[path]--* Enter for / *--> ")
			if p.len == 0 then p = null
			u = user_input("[user]--* Enter for guest *--> ")
			if u.len == 0 then p = null
			s = user_input("[scope]--* Enter for +wrx *--> ")
			if s.len == 0 then p = null
			selected_exploit.chmod_attack(p,u,s)
		else if input == 3 then 
			confirm = user_input(color.red+"<b>=== Confirm PWN ===\n{"+color.white+selected_exploit.PC.public_ip+color.cap+":"+color.yellow+selected_exploit.local_ip+color.cap+"}\n"+color.orange+"<b>** YOU CANNOT UNDO THIS ** \n--> ")
			if confirm == "pwn" then selected_exploit.sys_pwn
		else if input == 4 then
			// ok bud 
			root = selected_exploit
			attacking = false 
			//break
			return root
		else if input == 0 then 
			//attack_result = Attack
			attack_result = exploit_menu(shells, comps, files, others)
			selected_menu = attack_result[0]
			selected_exploit = attack_result[1]
		end if
	// COMPUTER 
	else if selected_menu == 2 then 
        input = user_input(color.blue+"Computer Object [ "+color.white+Utils.user(selected_exploit.PC)+color.cap+" ]\n1.) PW Attack \n2.) CHMOD \n3.) Cat Files\n4.) PWN\n0.) Main Menu\n--> ")
		input = input.val 
		if input == 1 then 
			root_attempt = selected.exploit.pw_attack()
			wait(0.1)
			if root_attempt == false then 
				print(color.orange+"Password change failed")
			end if
			if typeof(root_attempt) == "shell" then 
				root = root_attempt
				return root
			end if
		else if input == 2 then
			p = user_input("[path]--* Enter for / *--> ")
			if p.len == 0 then p = null
			u = user_input("[user]--* Enter for guest *--> ")
			if u.len == 0 then p = null
			s = user_input("[scope]--* Enter for +wrx *--> ")
			if s.len == 0 then p = null
			selected_exploit.chmod_attack(p,u,s)
		else if input == 3 then
			p = user_input("cat: specify path -- *Enter for /* --> ")
			if p.len == 0 then p = null
			selected_exploit.cat_attack(p)
		else if input == 4 then
			confirm = user_input(color.red+"<b>=== Confirm PWN ===\n{"+color.white+selected_exploit.PC.public_ip+color.cap+":"+color.yellow+selected_exploit.local_ip+color.cap+"}\n"+color.orange+"<b>!! YOU CANNOT UNDO THIS !! \n--> ")
			if confirm == "pwn" then selected_exploit.sys_pwn
		else if input == 0 then 
			//attack_result = Attack
			attack_result = exploit_menu(shells, comps, files, others)
			selected_menu = attack_result[0]
			selected_exploit = attack_result[1]
		end if 
	else if selected_menu == 3 then
		input = user_input("File Exploit:\n[ "+selected_exploit.F.name+" ]\n1.) Cattack \n2.) CHMOD \n3.) Content Set\n4.) PWN\n--> ") 
		input = input.val 
		if input == 1 then
			a = user_input("[args] [-a/*]")
			if a.len = 0 then selected_exploit.file_attack
			if a = "-a" then selected_exploit.file_attack(null, true)
		else if input == 2 then 
			u = user_input(color.green+"[User] *Enter For Guest* --> ")
			if u.len == 0 then u = "guest"
			p = user_input(color.green+"[o/g/u/+-wrx] *Enter For +wrx * --> ")
			if p.len == 0 then p = "o+wrx" 
			selected_exploit.chmod_attack(u, p)         
		else if input == 3 then

		else if input == 4 then 
			confirm = user_input(color.red+"<b>=== Confirm PWN ===\n{"+color.white+selected_exploit.F.name+color.cap"}\n"+color.orange+"<b>!! YOU CANNOT UNDO THIS !! \n--> ")
			if confirm == "pwn" then selected_exploit.sys_pwn
		else 
			//attack_result = Attack
			attack_result = exploit_menu(shells, comps, files, others)
			selected_menu = attack_result[0]
			selected_exploit = attack_result[1]
		end if 
	else if selected_menu == 4 then
	 	input = user_input("Other Exploit:\n[ "+selected_exploit+" ]") 
		input = input.val 
		if input == 1 then 
			
		else if input == 2 then 
		
		else if input == 3 then 
		
		else 
			//attack_result = Attack
			attack_result = exploit_menu(shells, comps, files, others)
			selected_menu = attack_result[0]
			selected_exploit = attack_result[1]
		end if
	end if
end while

if (root isa data.so) == true then 
	data.root = root
else
	data.root = null
end if
return data
// ill only use it via ss for now, however i may possibly add this menu back to keep it modular


//str = color.white+"[ SELECT OPTION ] \n"+color.white+"1.)"+color.cap+color.green+" Tran$fer Files\n"+color.white+"2.)"+color.cap+color.orange+" Plant eel (rshell)\n"+color.white+"3.)"+color.cap+color.yellow+" Trace Wipe (tools/logs)\n"+color.white+"4.)"+color.cap+color.red+" Launch Root Terminal\n"+color.white+"5.)"+color.cap+color.cyan+" Surf Mode"
//passing = false 
//eel_planted = null 
//while passing == false
	//if passing == true then break
	//print(str) 
	//input = user_input("--> ")
	//input = input.val
	//if input == 1 then 
		//remote_transfer(root)
	//end if
	//if input == 2 then
	//	if eel_planted then return print("The eel's Already Planted!") 
	//	root.launch("/home/guest/eel", "tuna")
	//	print("eel planted")
	//	passing = false
	//	eel_planted = true
	//end if
//	if input == 3 then
	//	trace_choice = user_input("1.) Tools\n2.) Logs\n--> ")
	//	trace_choice = trace_choice.val
	//	if trace_choice == 1 then root.launch("/home/guest/autoclean") 
	//	if trace_choice == 2 then Utils.wipe_log(root)
	//	passing = false
	//end if
	//if input == 4 then 
	//	passing = true
	//	return root.start_terminal
	//end if
 	//if input == 5 then
	//	passing = true 
	//	return root.launch("/home/guest/ss")
	//end if
//end while
